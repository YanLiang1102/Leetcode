class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        int length=nums.length;
        if(nums==null || length==0 || length==1 || length==2)
        {
            return result;
        }
        
        //int i,j=0;
//         for(int k=0;k<length-2;k++)
//         {
//             HashMap<Integer, Integer> hash=new HashMap();
//             for(int i=k+1;i<length-1;i++)
//             {
//                 hash.put(0-nums[k]-nums[i],i);    
//             }
//             for(int i=k+1;i<length-1;i++)
//             {
//                 if(hash.containsKey(nums[i]))
//                 {
//                     int index=hash.get(nums[i]);
//                     if(index<i)
//                     {
//                         ArrayList temp=new ArrayList<Integer>();
//                         temp.add(nums[k]);
//                         temp.add(nums[index]);
//                         temp.add(nums[i]);
//                         result.add(temp);                            
//                     }


//                 }

//             }            
//         }
        HashSet<List<Integer>> set=new HashSet();
        Arrays.sort(nums);
        for(int i=0;i<length-2;i++)
        {
            int j=i+1;
            int k=length-1;
            int curr=nums[i];
            while(j<k)
            {
                if(nums[j]+nums[k]+curr>0)
                {
                    k--;
                }
                else if(nums[j]+nums[k]+curr<0)
                {
                    j++;
                }
                else
                {
                    ArrayList temp=new ArrayList<Integer>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                        
                    if(!set.contains(temp))
                    {
                        result.add(temp);
                    set.add(temp);

                    }                                   
                    
                    k--;j++;
                }
            }
        }
            
        return result;
        
    }
}
